DROP TABLE IF EXISTS PLAN_ACTIVIDAD;
DROP TABLE IF EXISTS HORARIO;
DROP TABLE IF EXISTS LIMPIADOR_SALA;
DROP TABLE IF EXISTS MONITOR_ACTIVIDAD;
DROP TABLE IF EXISTS MATERIAL;
DROP TABLE IF EXISTS SUBSCRIPCION;
DROP TABLE IF EXISTS ENCARGADOS;
DROP TABLE IF EXISTS PLAN;
DROP TABLE IF EXISTS ACTIVIDAD;
DROP TABLE IF EXISTS SALA;
DROP TABLE IF EXISTS CLIENTE;
DROP TABLE IF EXISTS EMPLEADO;

DROP DOMAIN IF EXISTS DNI_DOMAIN;
CREATE DOMAIN DNI_DOMAIN
AS CHAR(9) CHECK (VALUE ~* '^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKE]$');

DROP DOMAIN IF EXISTS CORREO_DOMAIN;
CREATE DOMAIN CORREO_DOMAIN
AS VARCHAR(50) CHECK (VALUE ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$');

CREATE TABLE CLIENTE (
    DNI DNI_DOMAIN,
    NOMBRE VARCHAR(20),
    APELLIDOS VARCHAR(40),
    CORREO CORREO_DOMAIN,
    TELEFONO NUMERIC,
    PRIMARY KEY (DNI)
);

CREATE TABLE EMPLEADO (
    DNI DNI_DOMAIN,
    NOMBRE VARCHAR(20),
    APELLIDOS VARCHAR(40),
    CORREO CORREO_DOMAIN,
    TELEFONO NUMERIC,
    SALARIO NUMERIC,
    TIPO VARCHAR(20) CHECK (TIPO IN ('MONITOR', 'RECEPCIONISTA', 'LIMPIADOR')),
    PRIMARY KEY (DNI)
);

CREATE TABLE ENCARGADOS (
    DNI DNI_DOMAIN,
    DNI_EMPLEADO DNI_DOMAIN,
    NOMBRE VARCHAR(20),
    APELLIDOS VARCHAR(40),
    CORREO CORREO_DOMAIN,
    TELEFONO NUMERIC,
    SALARIO NUMERIC,
    PRIMARY KEY (DNI, DNI_EMPLEADO),
    FOREIGN KEY (DNI_EMPLEADO) REFERENCES EMPLEADO(DNI)
);

CREATE TABLE SALA (
    NUMERO NUMERIC,
    AFORO NUMERIC,
    SUPERFICIE NUMERIC,
    PRIMARY KEY (NUMERO)
);

CREATE TABLE ACTIVIDAD (
    ID NUMERIC,
    NOMBRE VARCHAR(40),
    PLAZAS NUMERIC,
    NUMERO NUMERIC,
    PRIMARY KEY (ID),
    FOREIGN KEY (NUMERO) REFERENCES SALA(NUMERO)
);

CREATE TABLE HORARIO (
    ID NUMERIC,
    DIA CHAR(1) CHECK (DIA IN ('L', 'M', 'X', 'J', 'V', 'S', 'D')),
    HORA_COMIENZO TIME,
    HORA_FINALIZACION TIME CHECK (HORA_COMIENZO < HORA_FINALIZACION),
    PRIMARY KEY(ID, DIA),
    FOREIGN KEY (ID) REFERENCES ACTIVIDAD(ID)
);

CREATE TABLE MATERIAL (
    ID NUMERIC,
    NUMERO NUMERIC,
    NOMBRE VARCHAR(20),
    CANTIDAD NUMERIC,
    PRIMARY KEY (ID),
    FOREIGN KEY (NUMERO) REFERENCES SALA(NUMERO) 
);

CREATE TABLE PLAN (
    ID NUMERIC,
    NOMBRE VARCHAR(30),
    PRECIO NUMERIC,
    PRIMARY KEY (ID)
);

CREATE TABLE PLAN_ACTIVIDAD (
    ID_PLAN NUMERIC,
    ID_ACTIVIDAD NUMERIC,
    PRIMARY KEY (ID_PLAN, ID_ACTIVIDAD),
    FOREIGN KEY (ID_PLAN) REFERENCES PLAN(ID),
    FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID)
);

CREATE TABLE SUBSCRIPCION (
    ID NUMERIC,
    DNI DNI_DOMAIN,
    PRIMARY KEY (ID, DNI),
    FOREIGN KEY (ID) REFERENCES PLAN(ID),
    FOREIGN KEY (DNI) REFERENCES CLIENTE(DNI)
);

CREATE TABLE LIMPIADOR_SALA (
    DNI DNI_DOMAIN,
    NUMERO NUMERIC,
    PRIMARY KEY (DNI, NUMERO),
    FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI),
    FOREIGN KEY (NUMERO) REFERENCES SALA(NUMERO)
);

CREATE TABLE MONITOR_ACTIVIDAD (
    DNI DNI_DOMAIN,
    ID NUMERIC,
    PRIMARY KEY (DNI),
    FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI),
    FOREIGN KEY (ID) REFERENCES ACTIVIDAD(ID)
);

/*COMPROBAR QUE NO SE PUEDE APUNTAR EN UNA ACTIVIDAD LLENA*/
DROP FUNCTION IF EXISTS PLAZAS_EXISTENTES;
CREATE FUNCTION PLAZAS_EXISTENTES()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
$$
DECLARE
    /*NUM_ACTIVIDAD_LLENAS INTEGER;*/
    ACTIVIDADES_LLENAS VARCHAR(40);
BEGIN
    SELECT ID_ACTIVIDAD
    INTO ACTIVIDADES_LLENAS
    FROM PLAN_ACTIVIDAD;
    /*SELECT COUNT(*)
    INTO NUM_ACTIVIDAD_LLENAS
    FROM (SELECT ID_ACTIVIDAD
          FROM PLAN_ACTIVIDAD
          INNER JOIN SUBSCRIPCION ON SUBSCRIPCION.ID = PLAN_ACTIVIDAD.ID_PLAN
          WHERE PLAN_ACTIVIDAD.ID_PLAN = NEW.ID
          GROUP BY ID_ACTIVIDAD
          HAVING (ID_ACTIVIDAD, COUNT(*)) IN (SELECT ID, PLAZAS
                                              FROM ACTIVIDAD)) AS ACTIVIDADES_LLENAS;*/

    /*IF NUM_ACTIVIDAD_LLENAS > 0 THEN*/
        RAISE EXCEPTION 'EXISTEN ACTIVIDADES DENTRO DEL PLAN QUE NO TIENEN PLAZAS DISPONIBLES %', ACTIVIDADES_LLENAS;
    /*ELSE
        RETURN NEW;
    END IF;*/
END;
$$;

CREATE TRIGGER A
BEFORE INSERT
ON SUBSCRIPCION
FOR EACH ROW
EXECUTE PROCEDURE PLAZAS_EXISTENTES();

/*COMPROBAR NO INSERTAR EN HORARIO UNA ACTIVIDAD EN LA MISMA HORA EN LA MISMA SALA*/
DROP FUNCTION IF EXISTS MISMA_HORA;
CREATE FUNCTION MISMA_HORA()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
$$
DECLARE
    NUM_SALAS_MISMA_HORA INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO NUM_SALAS_MISMA_HORA
    FROM (SELECT NUMERO
          FROM ACTIVIDAD
          WHERE ACTIVIDAD.ID = NEW.ID 
          INTERSECT 
          SELECT NUMERO
          FROM HORARIO
          INNER JOIN ACTIVIDAD ON ACTIVIDAD.ID = HORARIO.ID
          WHERE (NEW.DIA = DIA) 
          AND ((NEW.HORA_COMIENZO BETWEEN HORA_COMIENZO AND HORA_FINALIZACION) OR (NEW.HORA_FINALIZACION BETWEEN HORA_COMIENZO AND HORA_FINALIZACION))) AS SALAS_MISMA_HORA;
    
    IF NUM_SALAS_MISMA_HORA > 0 THEN
        RAISE EXCEPTION 'YA EXISTE UNA ACTIVIDAD EN ESA SALA A LA MISMA HORA';
    ELSE
        RETURN NEW;
    END IF;
END;
$$;

CREATE TRIGGER B
BEFORE INSERT
ON HORARIO
FOR EACH ROW
EXECUTE PROCEDURE MISMA_HORA();
