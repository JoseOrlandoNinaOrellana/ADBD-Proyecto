DROP TABLE IF EXISTS PLAN_ACTIVIDAD;
DROP TABLE IF EXISTS HORARIO;
DROP TABLE IF EXISTS LIMPIADOR_SALA;
DROP TABLE IF EXISTS MONITOR_ACTIVIDAD;
DROP TABLE IF EXISTS MATERIAL;
DROP TABLE IF EXISTS SUBSCRIPCION;
DROP TABLE IF EXISTS ENCARGADOS;
DROP TABLE IF EXISTS PLAN;
DROP TABLE IF EXISTS ACTIVIDAD;
DROP TABLE IF EXISTS SALA;
DROP TABLE IF EXISTS CLIENTE;
DROP TABLE IF EXISTS EMPLEADO;

DROP DOMAIN IF EXISTS DNI_DOMAIN;
CREATE DOMAIN DNI_DOMAIN
AS CHAR(9) NOT NULL CHECK (VALUE ~* '^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKE]$');

DROP DOMAIN IF EXISTS CORREO_DOMAIN;
CREATE DOMAIN CORREO_DOMAIN
AS VARCHAR(50) NOT NULL CHECK (VALUE ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$');

CREATE TABLE CLIENTE (
    DNI DNI_DOMAIN,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDOS VARCHAR(40) NOT NULL,
    CORREO CORREO_DOMAIN,
    TELEFONO INT NOT NULL,
    PRIMARY KEY (DNI)
);

CREATE TABLE EMPLEADO (
    DNI DNI_DOMAIN,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDOS VARCHAR(40) NOT NULL,
    CORREO CORREO_DOMAIN,
    TELEFONO INT NOT NULL,
    SALARIO INT NOT NULL,
    TIPO VARCHAR(20) CHECK (TIPO IN ('MONITOR', 'RECEPCIONISTA', 'LIMPIADOR')),
    PRIMARY KEY (DNI)
);

CREATE TABLE ENCARGADOS (
    DNI DNI_DOMAIN,
    DNI_EMPLEADO DNI_DOMAIN,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDOS VARCHAR(40) NOT NULL,
    CORREO CORREO_DOMAIN,
    TELEFONO INT NOT NULL,
    SALARIO INT NOT NULL,
    PRIMARY KEY (DNI, DNI_EMPLEADO),
    FOREIGN KEY (DNI_EMPLEADO) REFERENCES EMPLEADO(DNI)
);

CREATE TABLE SALA (
    NUMERO INT,
    AFORO INT NOT NULL,
    SUPERFICIE INT NOT NULL,
    PRIMARY KEY (NUMERO)
);

CREATE TABLE ACTIVIDAD (
    ID INT,
    NOMBRE VARCHAR(40) NOT NULL,
    PLAZAS INT NOT NULL,
    NUMERO INT NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (NUMERO) REFERENCES SALA(NUMERO)
);

CREATE TABLE HORARIO (
    ID INT,
    DIA CHAR(1) CHECK (DIA IN ('L', 'M', 'X', 'J', 'V', 'S', 'D')),
    HORA_COMIENZO TIME NOT NULL,
    HORA_FINALIZACION TIME NOT NULL CHECK (HORA_COMIENZO < HORA_FINALIZACION),
    PRIMARY KEY(ID, DIA),
    FOREIGN KEY (ID) REFERENCES ACTIVIDAD(ID)
);

CREATE TABLE MATERIAL (
    ID INT,
    NUMERO INT NOT NULL,
    NOMBRE VARCHAR(20) NOT NULL,
    CANTIDAD INT NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (NUMERO) REFERENCES SALA(NUMERO) 
);

CREATE TABLE PLAN (
    ID INT,
    NOMBRE VARCHAR(30) NOT NULL,
    PRECIO INT NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE PLAN_ACTIVIDAD (
    ID_PLAN INT,
    ID_ACTIVIDAD INT,
    PRIMARY KEY (ID_PLAN, ID_ACTIVIDAD),
    FOREIGN KEY (ID_PLAN) REFERENCES PLAN(ID),
    FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID)
);

CREATE TABLE SUBSCRIPCION (
    ID INT,
    DNI DNI_DOMAIN,
    FECHA_INICIO DATE NOT NULL, -- DEFAULT NOW(),
    FECHA_VENCIMIENTO DATE NOT NULL CHECK (FECHA_VENCIMIENTO > FECHA_INICIO),
    PRIMARY KEY (ID, DNI),
    FOREIGN KEY (ID) REFERENCES PLAN(ID),
    FOREIGN KEY (DNI) REFERENCES CLIENTE(DNI)
);

CREATE TABLE LIMPIADOR_SALA (
    DNI DNI_DOMAIN,
    NUMERO INT,
    PRIMARY KEY (DNI, NUMERO),
    FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI),
    FOREIGN KEY (NUMERO) REFERENCES SALA(NUMERO)
);

CREATE TABLE MONITOR_ACTIVIDAD (
    DNI DNI_DOMAIN,
    ID INT,
    PRIMARY KEY (DNI),
    FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI),
    FOREIGN KEY (ID) REFERENCES ACTIVIDAD(ID)
);

DROP FUNCTION IF EXISTS ACTIVIDADES_SIN_PLAZAS;
DROP FUNCTION IF EXISTS COINCIDENCIA_CON_OTRA_ACTIVIDAD;

CREATE FUNCTION ACTIVIDADES_SIN_PLAZAS()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
$$
DECLARE
    NUM_ACTIVIDADES_SIN_PLAZAS INT;
    ACTIVIDADES_SIN_PLAZAS VARCHAR(40)[];
BEGIN
    SELECT ARRAY_AGG(C.NOMBRE)
    INTO ACTIVIDADES_SIN_PLAZAS
    FROM (SELECT DISTINCT A.NOMBRE
    FROM (PLAN_ACTIVIDAD
    INNER JOIN ACTIVIDAD ON ACTIVIDAD.ID = PLAN_ACTIVIDAD.ID_ACTIVIDAD
    INNER JOIN SUBSCRIPCION ON SUBSCRIPCION.ID = PLAN_ACTIVIDAD.ID_PLAN) AS A
    WHERE A.ID_ACTIVIDAD IN (SELECT ID_ACTIVIDAD FROM PLAN_ACTIVIDAD WHERE ID_PLAN = NEW.ID)
    GROUP BY A.NOMBRE
    HAVING (A.NOMBRE, COUNT(*)) = (SELECT NOMBRE, PLAZAS FROM ACTIVIDAD AS B WHERE A.NOMBRE = B.NOMBRE)) AS C;

    SELECT ARRAY_LENGTH(ACTIVIDADES_SIN_PLAZAS, 1)
    INTO NUM_ACTIVIDADES_SIN_PLAZAS;

    IF NUM_ACTIVIDADES_SIN_PLAZAS > 0 THEN
        RAISE EXCEPTION 'NO EXISTEN PLAZAS DISPONIBLES PARA: %', ACTIVIDADES_SIN_PLAZAS;
    ELSE
        RETURN NEW;
    END IF;
END;
$$;

CREATE TRIGGER ACTIVIDADES_SIN_PLAZAS
BEFORE INSERT
ON SUBSCRIPCION
FOR EACH ROW
EXECUTE PROCEDURE ACTIVIDADES_SIN_PLAZAS();

CREATE FUNCTION COINCIDENCIA_CON_OTRA_ACTIVIDAD()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
$$
DECLARE
    NOMBRE_ACTIVIDAD VARCHAR(40);
BEGIN
    SELECT A.NOMBRE
    INTO NOMBRE_ACTIVIDAD
    FROM (ACTIVIDAD
    INNER JOIN HORARIO ON HORARIO.ID = ACTIVIDAD.ID) AS A
    WHERE A.NUMERO = (SELECT NUMERO FROM ACTIVIDAD WHERE ID = NEW.ID)
    AND (A.DIA = NEW.DIA)
    AND ((NEW.HORA_COMIENZO BETWEEN A.HORA_COMIENZO AND A.HORA_FINALIZACION) OR (NEW.HORA_FINALIZACION BETWEEN A.HORA_COMIENZO AND A.HORA_FINALIZACION));
    
    IF NOMBRE_ACTIVIDAD <> '' THEN
        RAISE EXCEPTION 'A LA MISMA HORA SE REALIZA LA ACTIVIDAD %', NOMBRE_ACTIVIDAD;
    ELSE
        RETURN NEW;
    END IF;
END;
$$;

CREATE TRIGGER COINCIDENCIA_CON_OTRA_ACTIVIDAD
BEFORE INSERT
ON HORARIO
FOR EACH ROW
EXECUTE PROCEDURE COINCIDENCIA_CON_OTRA_ACTIVIDAD();
